{
  "html": "<p><code class=\"highlighter-rouge\">CommonsChunkPlugin</code> 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。</p>",
  "content": "CommonsChunkPlugin 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。",
  "headings": [
    "为什么要用这个插件"
  ],
  "anchor": "为什么要用这个插件",
  "custom_ranking": {
    "position": 0,
    "heading": 70
  },
  "draft": false,
  "categories": [
    "工具"
  ],
  "layout": "post",
  "comments": true,
  "title": "Webapck3配置 - 提取公共代码",
  "tag": [
    "Webpack",
    "CommonsChunkPlugin"
  ],
  "ext": ".md",
  "tags": [
    "Webpack",
    "CommonsChunkPlugin"
  ],
  "date": 1513440000,
  "excerpt_html": "<h3 id=\"为什么要用这个插件\">为什么要用这个插件</h3>  <blockquote>   <p><code class=\"highlighter-rouge\">CommonsChunkPlugin</code> 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。</p> </blockquote>  <h3 id=\"适用场景\">适用场景</h3>  <ul>   <li>单页应用</li>   <li>单页应用 + 第三方依赖</li>   <li>多页应用 + 第三方依赖 + webpack生成的代码 <!-- more  --> ``` // 在根目录新建src文件夹，然后新建下面四个文件 . ├── childA.js ├── childB.js ├── module.js ├── pageA.js</li> </ul>  <p>// 他们存在以下引用关系 childA &lt;== module.js childB &lt;== module.js pageA &lt;== [childA, childB]</p> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> 那么我们来配置`webpack.config.js`  ```js const Webpack = require('webpack') const path = require('path')  module.exports = {   entry: {     'pageA': './src/pageA.js'   },   output: {     path: path.resolve(__dirname, './dist'),     filename: '[name].bundle.js',     chunkFilename: '[name].chunk.js' // 动态打包的出来的chunk 代码 filenaWebpackme   },   plugins: [     new Webpack.optimize.CommonsChunkPlugin({       name: 'common',       minChunks: 2     })   ] } </code></pre></div></div>  <h4 id=\"分析\">分析：</h4>  <p>理论上，打出的<code class=\"highlighter-rouge\">common.bundle.js</code>应该有 <code class=\"highlighter-rouge\">module.js</code>的内容，<code class=\"highlighter-rouge\">pageA.bundle.js</code>只有 <code class=\"highlighter-rouge\">childA.js</code>和<code class=\"highlighter-rouge\">childB.js</code>本身的内容 和 <code class=\"highlighter-rouge\">pageA.js</code>自身的内容。</p>  <p>但是，我们看到，打包出来的结果是，<code class=\"highlighter-rouge\">common.bundle.js</code>只有webpack生成的代码，没有<code class=\"highlighter-rouge\">module.js</code>的代码, 而所有代码都达到<code class=\"highlighter-rouge\">pageA.js</code>里去了，为什么？</p>  <p>原因是： <strong>提取公共代码时，entry 只少要有两个</strong></p>  <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 在src 下面新建pageB.js 文件，pageB 也引用 childA 和 childB 文件</span> <span class=\"c1\">// 在entry 下在加一个入口文件pageB</span> <span class=\"p\">...</span>  <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>   <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"p\">{</span>     <span class=\"s1\">'pageA'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageA.js'</span>     <span class=\"s1\">'pageB'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageB.js'</span>   <span class=\"p\">},</span>   <span class=\"na\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>     <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'./dist'</span><span class=\"p\">),</span>     <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].bundle.js'</span><span class=\"p\">,</span>     <span class=\"na\">chunkFilename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].chunk.js'</span>   <span class=\"p\">},</span>   <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'common'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"mi\">2</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span> <span class=\"p\">}</span> </code></pre></div></div>  <p>打包之后，<code class=\"highlighter-rouge\">common.bundle.js</code> 就有了 <code class=\"highlighter-rouge\">childA.js</code>和<code class=\"highlighter-rouge\">childB.js</code>和<code class=\"highlighter-rouge\">module.js</code>三个文件的内容，因为这三个文件都被引用了2次， <code class=\"highlighter-rouge\">pageA.js</code> 和 <code class=\"highlighter-rouge\">pageB.js</code>就只有本身的内容，这就符合我们的预期了</p>  <h3 id=\"打包第三方依赖\">打包第三方依赖</h3>  <p>我们在 <code class=\"highlighter-rouge\">pageA.js</code> 和 <code class=\"highlighter-rouge\">pageB.js</code> 里引入，<code class=\"highlighter-rouge\">import _ from 'lodash'</code></p>  <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span>  <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>   <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"p\">{</span>     <span class=\"s1\">'pageA'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageA.js'</span><span class=\"p\">,</span>     <span class=\"s1\">'pageB'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageB.js'</span><span class=\"p\">,</span>     <span class=\"s1\">'vendor'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'lodash'</span><span class=\"p\">]</span>   <span class=\"p\">},</span>   <span class=\"na\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>     <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'./dist'</span><span class=\"p\">),</span>     <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].bundle.js'</span><span class=\"p\">,</span>     <span class=\"na\">chunkFilename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].chunk.js'</span>   <span class=\"p\">},</span>   <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'vendor'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span> <span class=\"c1\">// 因为我们已经指定了 vendor,也不需要在其他模块去找了</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span> <span class=\"p\">}</span> </code></pre></div></div>  <p>但是这个打出来的<code class=\"highlighter-rouge\">vendor.bundle.js</code>包含了 lodash 代码和 webpack 自己生成的代码，如果想生成干净的第三方依赖，也就是将webpack生成的代码独立出来，</p>  <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>   <span class=\"p\">...</span>   <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'vendor'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">}),</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'manifest'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span>   <span class=\"p\">...</span> <span class=\"p\">}</span> </code></pre></div></div> <p>这样就可以将 weback 生成的代码和 第三方依赖完全分开，</p>  <p>上面代码我们还可以进一步优化</p> <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>   <span class=\"p\">...</span>   <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">names</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'vendor'</span><span class=\"p\">,</span> <span class=\"s1\">'manifest'</span><span class=\"p\">],</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span>   <span class=\"p\">...</span> <span class=\"p\">}</span> </code></pre></div></div>  <p>最后我们加上，提取业务代码公共代码的配置</p>  <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>   <span class=\"p\">...</span>   <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'common'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"mi\">2</span>     <span class=\"p\">}),</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">names</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'vendor'</span><span class=\"p\">,</span> <span class=\"s1\">'manifest'</span><span class=\"p\">],</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span>   <span class=\"p\">...</span> <span class=\"p\">}</span> </code></pre></div></div>  <p>但是却在打包的时候报错了</p> <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">ERROR</span> <span class=\"k\">in</span> <span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">:</span> <span class=\"nx\">While</span> <span class=\"nx\">running</span> <span class=\"k\">in</span> <span class=\"nx\">normal</span> <span class=\"nx\">mode</span> <span class=\"nx\">it</span><span class=\"s1\">'s not allowed to use a non-entry chunk (vendor) </span></code></pre></div></div>  <p>意思是不允许在非入口文件的chunk提取公共代码，这里有两种解决方法</p>  <p>第一种方法：</p> <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>   <span class=\"p\">...</span>   <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'common'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>       <span class=\"na\">chunks</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'pageA'</span><span class=\"p\">,</span> <span class=\"s1\">'pageB'</span><span class=\"p\">]</span>  <span class=\"c1\">// 指定入口文件 去提取公共代码</span>     <span class=\"p\">}),</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">names</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'vendor'</span><span class=\"p\">,</span> <span class=\"s1\">'manifest'</span><span class=\"p\">],</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span>   <span class=\"p\">...</span> <span class=\"p\">}</span> </code></pre></div></div> <p>第二种方法：(目测是因为plugins是从左向右执行)</p> <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>   <span class=\"p\">...</span>   <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">names</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'vendor'</span><span class=\"p\">,</span> <span class=\"s1\">'manifest'</span><span class=\"p\">],</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span>     <span class=\"p\">}),</span>     <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>       <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'common'</span><span class=\"p\">,</span>       <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>     <span class=\"p\">})</span>   <span class=\"p\">]</span>   <span class=\"p\">...</span> <span class=\"p\">}</span> </code></pre></div></div>  <p>推荐用第一种方法，因为第二种不可控</p>  <p>完整配置文件</p>  <figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1<br data-jekyll-commonmark-ghpages=\"\" />2<br data-jekyll-commonmark-ghpages=\"\" />3<br data-jekyll-commonmark-ghpages=\"\" />4<br data-jekyll-commonmark-ghpages=\"\" />5<br data-jekyll-commonmark-ghpages=\"\" />6<br data-jekyll-commonmark-ghpages=\"\" />7<br data-jekyll-commonmark-ghpages=\"\" />8<br data-jekyll-commonmark-ghpages=\"\" />9<br data-jekyll-commonmark-ghpages=\"\" />10<br data-jekyll-commonmark-ghpages=\"\" />11<br data-jekyll-commonmark-ghpages=\"\" />12<br data-jekyll-commonmark-ghpages=\"\" />13<br data-jekyll-commonmark-ghpages=\"\" />14<br data-jekyll-commonmark-ghpages=\"\" />15<br data-jekyll-commonmark-ghpages=\"\" />16<br data-jekyll-commonmark-ghpages=\"\" />17<br data-jekyll-commonmark-ghpages=\"\" />18<br data-jekyll-commonmark-ghpages=\"\" />19<br data-jekyll-commonmark-ghpages=\"\" />20<br data-jekyll-commonmark-ghpages=\"\" />21<br data-jekyll-commonmark-ghpages=\"\" />22<br data-jekyll-commonmark-ghpages=\"\" />23<br data-jekyll-commonmark-ghpages=\"\" />24<br data-jekyll-commonmark-ghpages=\"\" />25<br data-jekyll-commonmark-ghpages=\"\" />26<br data-jekyll-commonmark-ghpages=\"\" /></pre></td><td class=\"code\"><pre><span class=\"kd\">const</span> <span class=\"nx\">Webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'webpack'</span><span class=\"p\">)</span><br data-jekyll-commonmark-ghpages=\"\" /><span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">)</span><br data-jekyll-commonmark-ghpages=\"\" /><br data-jekyll-commonmark-ghpages=\"\" /><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"p\">{</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"s1\">'pageA'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageA.js'</span><span class=\"p\">,</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"s1\">'pageB'</span><span class=\"p\">:</span> <span class=\"s1\">'./src/pageB.js'</span><span class=\"p\">,</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"s1\">'vendor'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'lodash'</span><span class=\"p\">]</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"p\">},</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"na\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'./dist'</span><span class=\"p\">),</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].bundle.js'</span><span class=\"p\">,</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"na\">chunkFilename</span><span class=\"p\">:</span> <span class=\"s1\">'[name].chunk.js'</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"p\">},</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span><br data-jekyll-commonmark-ghpages=\"\" />      <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'common'</span><span class=\"p\">,</span><br data-jekyll-commonmark-ghpages=\"\" />      <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span><br data-jekyll-commonmark-ghpages=\"\" />      <span class=\"na\">chunks</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'pageA'</span><span class=\"p\">,</span> <span class=\"s1\">'pageB'</span><span class=\"p\">]</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"p\">}),</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"k\">new</span> <span class=\"nx\">Webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span><br data-jekyll-commonmark-ghpages=\"\" />      <span class=\"na\">names</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'vendor'</span><span class=\"p\">,</span> <span class=\"s1\">'manifest'</span><span class=\"p\">],</span><br data-jekyll-commonmark-ghpages=\"\" />      <span class=\"na\">minChunks</span><span class=\"p\">:</span> <span class=\"kc\">Infinity</span><br data-jekyll-commonmark-ghpages=\"\" />    <span class=\"p\">})</span><br data-jekyll-commonmark-ghpages=\"\" />  <span class=\"p\">]</span><br data-jekyll-commonmark-ghpages=\"\" /><span class=\"p\">}</span></pre></td></tr></tbody></table></code></pre></figure>",
  "excerpt_text": "为什么要用这个插件 CommonsChunkPlugin 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。 适用场景 单页应用 单页应用 + 第三方依赖 多页应用 + 第三方依赖 + webpack生成的代码 ``` // 在根目录新建src文件夹，然后新建下面四个文件 . ├── childA.js ├── childB.js ├── module.js ├── pageA.js // 他们存在以下引用关系 childA <== module.js childB <== module.js pageA <== [childA, childB] 那么我们来配置`webpack.config.js` ```js const Webpack = require('webpack') const path = require('path') module.exports = { entry: { 'pageA': './src/pageA.js' }, output: { path: path.resolve(__dirname, './dist'), filename: '[name].bundle.js', chunkFilename: '[name].chunk.js' // 动态打包的出来的chunk 代码 filenaWebpackme }, plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2 }) ] } 分析： 理论上，打出的common.bundle.js应该有 module.js的内容，pageA.bundle.js只有 childA.js和childB.js本身的内容 和 pageA.js自身的内容。 但是，我们看到，打包出来的结果是，common.bundle.js只有webpack生成的代码，没有module.js的代码, 而所有代码都达到pageA.js里去了，为什么？ 原因是： 提取公共代码时，entry 只少要有两个 // 在src 下面新建pageB.js 文件，pageB 也引用 childA 和 childB 文件 // 在entry 下在加一个入口文件pageB ... module.exports = { entry: { 'pageA': './src/pageA.js' 'pageB': './src/pageB.js' }, output: { path: path.resolve(__dirname, './dist'), filename: '[name].bundle.js', chunkFilename: '[name].chunk.js' }, plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2 }) ] } 打包之后，common.bundle.js 就有了 childA.js和childB.js和module.js三个文件的内容，因为这三个文件都被引用了2次， pageA.js 和 pageB.js就只有本身的内容，这就符合我们的预期了 打包第三方依赖 我们在 pageA.js 和 pageB.js 里引入，import _ from 'lodash' ... module.exports = { entry: { 'pageA': './src/pageA.js', 'pageB': './src/pageB.js', 'vendor': ['lodash'] }, output: { path: path.resolve(__dirname, './dist'), filename: '[name].bundle.js', chunkFilename: '[name].chunk.js' }, plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'vendor', minChunks: Infinity // 因为我们已经指定了 vendor,也不需要在其他模块去找了 }) ] } 但是这个打出来的vendor.bundle.js包含了 lodash 代码和 webpack 自己生成的代码，如果想生成干净的第三方依赖，也就是将webpack生成的代码独立出来， { ... plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'vendor', minChunks: Infinity }), new Webpack.optimize.CommonsChunkPlugin({ name: 'manifest', minChunks: Infinity }) ] ... } 这样就可以将 weback 生成的代码和 第三方依赖完全分开， 上面代码我们还可以进一步优化 { ... plugins: [ new Webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'], minChunks: Infinity }) ] ... } 最后我们加上，提取业务代码公共代码的配置 { ... plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2 }), new Webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'], minChunks: Infinity }) ] ... } 但是却在打包的时候报错了 ERROR in CommonsChunkPlugin: While running in normal mode it's not allowed to use a non-entry chunk (vendor) 意思是不允许在非入口文件的chunk提取公共代码，这里有两种解决方法 第一种方法： { ... plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2, chunks: ['pageA', 'pageB'] // 指定入口文件 去提取公共代码 }), new Webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'], minChunks: Infinity }) ] ... } 第二种方法：(目测是因为plugins是从左向右执行) { ... plugins: [ new Webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'], minChunks: Infinity }), new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2, }) ] ... } 推荐用第一种方法，因为第二种不可控 完整配置文件 1234567891011121314151617181920212223242526const Webpack = require('webpack')const path = require('path')module.exports = { entry: { 'pageA': './src/pageA.js', 'pageB': './src/pageB.js', 'vendor': ['lodash'] }, output: { path: path.resolve(__dirname, './dist'), filename: '[name].bundle.js', chunkFilename: '[name].chunk.js' }, plugins: [ new Webpack.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2, chunks: ['pageA', 'pageB'] }), new Webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'], minChunks: Infinity }) ]}",
  "slug": "Webpack3-提取公用代码",
  "type": "post",
  "url": "/%E5%B7%A5%E5%85%B7/2017/12/17/Webpack3-%E6%8F%90%E5%8F%96%E5%85%AC%E7%94%A8%E4%BB%A3%E7%A0%81/",
  "objectID": "d3044d24b50943ac4fd6cf3b7a709e9e"
}