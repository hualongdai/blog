{
  "html": "<p>页面文档完全加载并解析完毕之后,会触发 DOMContentLoaded 事件，HTML 文档不会等待样式文件,图片文件,子框架页面的加载(load 事件可以用来检测 HTML 页面是否完全加载完毕(fully-loaded))。</p>",
  "content": "页面文档完全加载并解析完毕之后,会触发 DOMContentLoaded 事件，HTML 文档不会等待样式文件,图片文件,子框架页面的加载(load 事件可以用来检测 HTML 页面是否完全加载完毕(fully-loaded))。",
  "headings": [
    "属性解释",
    "DOMContentLoaded 是什么？"
  ],
  "anchor": "domcontentloaded-是什么",
  "custom_ranking": {
    "position": 3,
    "heading": 70
  },
  "draft": false,
  "categories": [
    "web性能"
  ],
  "layout": "post",
  "comments": true,
  "title": "window.performance 详解",
  "tag": [
    "performance",
    "JS"
  ],
  "ext": ".md",
  "tags": [
    "performance",
    "JS"
  ],
  "date": 1477584000,
  "excerpt_html": "<h2 id=\"官方定义\">官方定义</h2>  <blockquote>   <p>The <code class=\"highlighter-rouge\">Window</code> interface’s performance property returns a Performance object, which can be used to gather performance information about the current document.</p> </blockquote>  <h2 id=\"兼容性\">兼容性</h2>  <ul>   <li><code class=\"highlighter-rouge\">&gt;= IE9</code></li>   <li><code class=\"highlighter-rouge\">&gt;= chrome 6.0</code></li>   <li><code class=\"highlighter-rouge\">&gt;= Firefox 7.0</code></li>   <li><code class=\"highlighter-rouge\">&gt;= Safari 8</code></li> </ul>  <h2 id=\"属性解释\">属性解释</h2>  <p>在 console 口输入 <code class=\"highlighter-rouge\">window.performance</code>，会出现如下结果:</p>  <p>当前版本: chrome 63</p>  <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">   </span><span class=\"s2\">\"memory\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">     </span><span class=\"s2\">\"jsHeapSizeLimit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2190000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">内存大小限制</span><span class=\"w\">     </span><span class=\"s2\">\"totalJSHeapSize\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">27600000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">可以使用的大小</span><span class=\"w\">     </span><span class=\"s2\">\"usedJSHeapSize\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">24500000</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">已经使用的大小</span><span class=\"w\">   </span><span class=\"err\">一定要小于</span><span class=\"w\"> </span><span class=\"err\">totalJSHeapSize</span><span class=\"w\"> </span><span class=\"err\">否则很有可能是内存泄漏了</span><span class=\"w\">   </span><span class=\"p\">},</span><span class=\"w\">   </span><span class=\"s2\">\"timing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload</span><span class=\"w\"> </span><span class=\"err\">的时间戳，如果无前一个网页</span><span class=\"w\"> </span><span class=\"err\">unload</span><span class=\"w\"> </span><span class=\"err\">，则与</span><span class=\"w\"> </span><span class=\"err\">fetchStart</span><span class=\"w\"> </span><span class=\"err\">值相等</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">举个栗子：</span><span class=\"w\"> </span><span class=\"err\">我在baidu.com</span><span class=\"w\"> </span><span class=\"err\">的时候，在地址栏输入了</span><span class=\"w\"> </span><span class=\"err\">lagou.com</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">这个时候浏览器会先</span><span class=\"w\"> </span><span class=\"err\">unload</span><span class=\"w\"> </span><span class=\"err\">当前文档，然后请求lagou.com</span><span class=\"w\">     </span><span class=\"s2\">\"navigationStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886596</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">返回前一个网页</span><span class=\"w\"> </span><span class=\"err\">unload</span><span class=\"w\"> </span><span class=\"err\">事件绑定的回调函数执行完毕的时间戳</span><span class=\"w\">     </span><span class=\"s2\">\"unloadEventStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886620</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">前一个网页（与当前页面同域）unload</span><span class=\"w\"> </span><span class=\"err\">的时间戳，如果无前一个网页</span><span class=\"w\"> </span><span class=\"err\">unload</span><span class=\"w\"> </span><span class=\"err\">或者前一个网页与当前页面不同域，则值为</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"s2\">\"unloadEventEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886620</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">第一个</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">重定向发生时的时间，有跳转且是同域名内的重定向才算，否则值为</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"s2\">\"redirectStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">最后一个</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">重定向</span><span class=\"w\"> </span><span class=\"err\">发生的时间，</span><span class=\"w\"> </span><span class=\"err\">有跳转且是同域名内部的重定向才算，否则值为</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"s2\">\"redirectEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">浏览器准备好使用</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">请求抓取文档的时间，这发生在检查本地缓存之前</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">等价于</span><span class=\"w\"> </span><span class=\"err\">浏览器发起任何请求之前的时刻</span><span class=\"w\">     </span><span class=\"s2\">\"fetchStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886601</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">DNS</span><span class=\"w\"> </span><span class=\"err\">域名查询开始的时间，如果使用了本地缓存（即无</span><span class=\"w\"> </span><span class=\"err\">DNS</span><span class=\"w\"> </span><span class=\"err\">查询）或持久连接，则与</span><span class=\"w\"> </span><span class=\"err\">fetchStart</span><span class=\"w\"> </span><span class=\"err\">值相等</span><span class=\"w\">     </span><span class=\"s2\">\"domainLookupStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886601</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">DNS</span><span class=\"w\"> </span><span class=\"err\">域名查询完成的时间，如果使用了本地缓存（即无</span><span class=\"w\"> </span><span class=\"err\">DNS</span><span class=\"w\"> </span><span class=\"err\">查询）或持久连接，则与</span><span class=\"w\"> </span><span class=\"err\">fetchStart</span><span class=\"w\"> </span><span class=\"err\">值相等</span><span class=\"w\">     </span><span class=\"s2\">\"domainLookupEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886601</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTP（TCP）</span><span class=\"w\"> </span><span class=\"err\">开始建立连接的时间，如果是持久连接，则与</span><span class=\"w\"> </span><span class=\"err\">fetchStart</span><span class=\"w\"> </span><span class=\"err\">值相等</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span><span class=\"w\">     </span><span class=\"s2\">\"connectStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886601</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTP（TCP）</span><span class=\"w\"> </span><span class=\"err\">完成建立连接的时间（完成握手），如果是持久连接(如webscoket)，则与</span><span class=\"w\"> </span><span class=\"err\">fetchStart</span><span class=\"w\"> </span><span class=\"err\">值相等</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">注意这里握手结束，包括安全连接建立完成、SOCKS</span><span class=\"w\"> </span><span class=\"err\">授权通过</span><span class=\"w\">     </span><span class=\"s2\">\"connectEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886601</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTPS</span><span class=\"w\"> </span><span class=\"err\">连接开始的时间，如果不是安全连接，则值为</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"s2\">\"secureConnectionStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">连接错误重连时，这里显示的也是新建立连接的时间</span><span class=\"w\">     </span><span class=\"s2\">\"requestStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886603</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span><span class=\"w\">     </span><span class=\"s2\">\"responseStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886616</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">HTTP</span><span class=\"w\"> </span><span class=\"err\">响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span><span class=\"w\">     </span><span class=\"s2\">\"responseEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886620</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">开始解析渲染</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">树的时间，此时</span><span class=\"w\"> </span><span class=\"err\">Document.readyState</span><span class=\"w\"> </span><span class=\"err\">变为</span><span class=\"w\"> </span><span class=\"err\">loading，并将抛出</span><span class=\"w\"> </span><span class=\"err\">readystatechange</span><span class=\"w\"> </span><span class=\"err\">相关事件</span><span class=\"w\">     </span><span class=\"s2\">\"domLoading\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358886630</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">完成解析</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">树的时间，Document.readyState</span><span class=\"w\"> </span><span class=\"err\">变为</span><span class=\"w\"> </span><span class=\"err\">interactive，并将抛出</span><span class=\"w\"> </span><span class=\"err\">readystatechange</span><span class=\"w\"> </span><span class=\"err\">相关事件</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">注意只是</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">树解析完成，这时候并没有开始加载网页内的资源</span><span class=\"w\">     </span><span class=\"s2\">\"domInteractive\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887165</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">解析完成后，网页内资源加载开始的时间</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">在</span><span class=\"w\"> </span><span class=\"err\">DOMContentLoaded</span><span class=\"w\"> </span><span class=\"err\">事件抛出前发生</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">那</span><span class=\"w\"> </span><span class=\"err\">DOMContentLoaded</span><span class=\"w\"> </span><span class=\"err\">是什么时候发生的？看后面！</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">这个时候</span><span class=\"w\"> </span><span class=\"err\">用户可以对页面进行操作，也就是jQuery中的domready时间</span><span class=\"w\">     </span><span class=\"s2\">\"domContentLoadedEventStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887165</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">解析完成后，网页内资源加载完成的时间（如</span><span class=\"w\"> </span><span class=\"err\">JS</span><span class=\"w\"> </span><span class=\"err\">脚本加载执行完毕</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">图片加载完毕等）</span><span class=\"w\">     </span><span class=\"s2\">\"domContentLoadedEventEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887165</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">DOM</span><span class=\"w\"> </span><span class=\"err\">树加载完成，且资源也准备就绪的时间，Document.readyState</span><span class=\"w\"> </span><span class=\"err\">变为</span><span class=\"w\"> </span><span class=\"err\">complete，并将抛出</span><span class=\"w\"> </span><span class=\"err\">readystatechange</span><span class=\"w\"> </span><span class=\"err\">相关事件</span><span class=\"w\">     </span><span class=\"s2\">\"domComplete\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887242</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">load</span><span class=\"w\"> </span><span class=\"err\">事件发送给文档，也即</span><span class=\"w\"> </span><span class=\"err\">load</span><span class=\"w\"> </span><span class=\"err\">回调函数开始执行的时间</span><span class=\"w\">  </span><span class=\"err\">===</span><span class=\"w\"> </span><span class=\"err\">onload事件触发开始时间点</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">注意如果没有绑定</span><span class=\"w\"> </span><span class=\"err\">load</span><span class=\"w\"> </span><span class=\"err\">事件，值为</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"s2\">\"loadEventStart\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887242</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">load</span><span class=\"w\"> </span><span class=\"err\">事件的回调函数执行完毕的时间</span><span class=\"w\">  </span><span class=\"err\">===</span><span class=\"w\"> </span><span class=\"err\">onload事件执行结束时间点</span><span class=\"w\">     </span><span class=\"s2\">\"loadEventEnd\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1514358887251</span><span class=\"w\">   </span><span class=\"p\">},</span><span class=\"w\">   </span><span class=\"s2\">\"navigation\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">     </span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">页面来源类型</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">表示正常进入的页面</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">通过</span><span class=\"w\"> </span><span class=\"err\">window.location.reload</span><span class=\"w\"> </span><span class=\"err\">刷新的页面</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">通过</span><span class=\"w\"> </span><span class=\"err\">浏览器的前进/后退进入的页面</span><span class=\"w\">     </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"err\">非以上方式进入的</span><span class=\"w\">     </span><span class=\"s2\">\"redirectCount\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">如果是重定向的话</span><span class=\"w\">  </span><span class=\"err\">通过几次重定向过来的</span><span class=\"w\">   </span><span class=\"p\">},</span><span class=\"w\">   </span><span class=\"s2\">\"onresourcetimingbufferfull\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"s2\">\"timeOrigin\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1514358886596.462</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span></code></pre></div></div>",
  "excerpt_text": "官方定义 The Window interface’s performance property returns a Performance object, which can be used to gather performance information about the current document. 兼容性 >= IE9 >= chrome 6.0 >= Firefox 7.0 >= Safari 8 属性解释 在 console 口输入 window.performance，会出现如下结果: 当前版本: chrome 63 { \"memory\": { \"jsHeapSizeLimit\": 2190000000, // 内存大小限制 \"totalJSHeapSize\": 27600000, // 可以使用的大小 \"usedJSHeapSize\": 24500000 // 已经使用的大小 一定要小于 totalJSHeapSize 否则很有可能是内存泄漏了 }, \"timing\": { // 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等 // 举个栗子： 我在baidu.com 的时候，在地址栏输入了 lagou.com, 这个时候浏览器会先 unload 当前文档，然后请求lagou.com \"navigationStart\": 1514358886596, // 返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳 \"unloadEventStart\": 1514358886620, // 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0 \"unloadEventEnd\": 1514358886620, // 第一个 HTTP 重定向发生时的时间，有跳转且是同域名内的重定向才算，否则值为 0 \"redirectStart\": 0, // 最后一个 HTTP 重定向 发生的时间， 有跳转且是同域名内部的重定向才算，否则值为 0 \"redirectEnd\": 0, // 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前 // 等价于 浏览器发起任何请求之前的时刻 \"fetchStart\": 1514358886601, // DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等 \"domainLookupStart\": 1514358886601, // DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等 \"domainLookupEnd\": 1514358886601, // HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等 // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间 \"connectStart\": 1514358886601, // HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接(如webscoket)，则与 fetchStart 值相等 // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间 // 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过 \"connectEnd\": 1514358886601, // HTTPS 连接开始的时间，如果不是安全连接，则值为 0 \"secureConnectionStart\": 0, // HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存 // 连接错误重连时，这里显示的也是新建立连接的时间 \"requestStart\": 1514358886603, // HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存 \"responseStart\": 1514358886616, // HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存 \"responseEnd\": 1514358886620, // 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件 \"domLoading\": 1514358886630, // 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件 // 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源 \"domInteractive\": 1514358887165, // DOM 解析完成后，网页内资源加载开始的时间 // 在 DOMContentLoaded 事件抛出前发生, 那 DOMContentLoaded 是什么时候发生的？看后面！ // 这个时候 用户可以对页面进行操作，也就是jQuery中的domready时间 \"domContentLoadedEventStart\": 1514358887165, // DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕, 图片加载完毕等） \"domContentLoadedEventEnd\": 1514358887165, // DOM 树加载完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件 \"domComplete\": 1514358887242, // load 事件发送给文档，也即 load 回调函数开始执行的时间 === onload事件触发开始时间点 // 注意如果没有绑定 load 事件，值为 0 \"loadEventStart\": 1514358887242, // load 事件的回调函数执行完毕的时间 === onload事件执行结束时间点 \"loadEventEnd\": 1514358887251 }, \"navigation\": { \"type\": 0, // 页面来源类型 // 0 表示正常进入的页面 // 1 通过 window.location.reload 刷新的页面 // 2 通过 浏览器的前进/后退进入的页面 // 255 非以上方式进入的 \"redirectCount\": 0 // 如果是重定向的话 通过几次重定向过来的 }, \"onresourcetimingbufferfull\": null, \"timeOrigin\": 1514358886596.462 }",
  "slug": "window.performance详解",
  "type": "post",
  "url": "/web%E6%80%A7%E8%83%BD/2016/10/28/window.performance%E8%AF%A6%E8%A7%A3/",
  "objectID": "ea002897521393e0593ebd45e4172de2"
}